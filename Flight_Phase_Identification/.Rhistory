get_wss <- function(x) {
center_cols <- grep(colnames(x), pattern = "center_")
x_centers <- as.matrix(x[, center_cols])
x <- as.matrix(x[, -center_cols])
return(sum((x - x_centers)^2))
}
run_kmeans <- function(x, k) {
prev_clusters <- sample(x = 1:k, size = nrow(x), replace = T)
same_clusters <- FALSE
while(!same_clusters) {
centers <- get_centers(x = x, clusters = prev_clusters)
colnames(centers)[-1] <- paste0("center_", colnames(centers)[-1])
next_clusters <- update_membership(x = x, centers = centers[, -1])
same_clusters <- all(prev_clusters == next_clusters)
if(!same_clusters) {
prev_clusters <- next_clusters
}
}
x1 <- data.frame(x)
x1$cluster <- next_clusters
x1 <- merge(x1, centers, by = "cluster")
x1$cluster <- NULL
wss <- get_wss(x1)
return(list(cluster = next_clusters, wss = wss))
}
cluster <- run_kmeans(x = x_train, k = 5)
cluster_class <- table("Cluster" = cluster$cluster, "Label" = y_train)
print(cluster_class)
cluster_max_class <- apply(cluster_class, 1, function(row)
return(which.max(row) - 1))
print(cluster_max_class)
library(ElemStatLearn)
data("zip.train")
x_train <- zip.train[, -1]
y_train <- zip.train[, 1]
set.seed(1)
get_centers <- function(x, clusters) {
aggr <- aggregate(x = x, by = list(cluster = clusters), FUN = mean)
return(aggr)
}
update_membership <- function(x, centers) {
dists <- apply(centers, 1, function(cluster_row) {
reps <- rep(cluster_row, nrow(x))
cluster_row <- matrix(reps, nrow = nrow(x), byrow = T)
return(rowSums((x-cluster_row)^2))
})
membership <- apply(dists, 1, function(row) {
return(which.min(row))
})
}
get_wss <- function(x) {
center_cols <- grep(colnames(x), pattern = "center_")
x_centers <- as.matrix(x[, center_cols])
x <- as.matrix(x[, -center_cols])
return(sum((x - x_centers)^2))
}
run_kmeans <- function(x, k) {
prev_clusters <- sample(x = 1:k, size = nrow(x), replace = T)
same_clusters <- FALSE
while(!same_clusters) {
centers <- get_centers(x = x, clusters = prev_clusters)
colnames(centers)[-1] <- paste0("center_", colnames(centers)[-1])
next_clusters <- update_membership(x = x, centers = centers[, -1])
same_clusters <- all(prev_clusters == next_clusters)
if(!same_clusters) {
prev_clusters <- next_clusters
}
}
x1 <- data.frame(x)
x1$cluster <- next_clusters
x1 <- merge(x1, centers, by = "cluster")
x1$cluster <- NULL
wss <- get_wss(x1)
return(list(cluster = next_clusters, wss = wss))
}
cluster <- run_kmeans(x = x_train, k = 5)
cluster_class <- table("Cluster" = cluster$cluster, "Label" = y_train)
print(cluster_class)
cluster_max_class <- apply(cluster_class, 1, function(row)
return(which.max(row) - 1))
print(cluster_max_class)
?princomp
pca <- princomp(x = x_train, center = T, scale = T)
plot(x = pca$scores[, 1], y = pca$scores[, 2], col = clusters,
xlab = "PC1", ylab = "PC2", pch = 19)
min_wss <- Inf
clusters <- c()
for(i in 1:10) {
cluster <- run_kmeans(x = x_train, k = 5)
if(cluster$wss < min_wss) {
min_wss <- cluster$wss
clusters <- cluster$cluster
}
}
pca <- princomp(x = x_train, center = T, scale = T)
plot(x = pca$scores[, 1], y = pca$scores[, 2], col = clusters,
xlab = "PC1", ylab = "PC2", pch = 19)
legend("topright", legend = paste0("Cluster_", unique(clusters)),
fill = unique(clusters))
km <- kmeans(x_train, centers = 5, nstart = 10)
cluster_class <- table("Cluster" = km$cluster, "Label" = y_train)
print(cluster_class)
plot(x = pca$scores[, 1], y = pca$scores[, 2], col = km$cluster,
xlab = "PC1", ylab = "PC2", pch = 19)
legend("topright", legend = paste0("Cluster_", unique(km$cluster)),
fill = unique(km$cluster))
cluster_class <- table("Cluster" = km$cluster, "Label" = clusters)
print(cluster_class)
calculate_ML_sigma <- function(x, mu, ez) {
x_mu <- apply(x, 1, function(x_i) {
diff1 <- x_i - mu
mat <- diff1 %*% t(diff1)
return(mat)
})
temp_ez <- t(matrix(rep(ez, 4), nrow = 272, byrow = F))
s1 <- rowSums(x_mu * temp_ez) / sum(ez)
Sigma1 <- matrix(s1, nrow = ncol(x), ncol = ncol(x))
}
library(mvtnorm)
pi1 <- 0.5
convergence <- F
estimate_GMM <- function(x, mu1, mu2, Sigma1, Sigma2, plot_iter = F,
plot_iters = c(2, 3, 4, -1), epsilon = 1e-6,
print_iter_logL = FALSE) {
iter_num <- 1
prev_logL <- -Inf
while(!convergence) {
# E step
d1 <- pi1 * dmvnorm(x = x, mean = mu1, sigma = Sigma1)
d2 <- (1 - pi1) * dmvnorm(x = x, mean = mu2, sigma = Sigma2)
ez = d2 / (d1 + d2)
ez1 <- 1 - ez
# M step
mu1 <- colSums(ez1 * x) / sum(ez1)
mu2 <- colSums(ez * x) / sum(ez)
Sigma1 <- calculate_ML_sigma(x, mu1, ez1)
Sigma2 <- calculate_ML_sigma(x, mu2, ez)
current_logL <- sum(ez1 * log(d1) + ez * log(d2)) + sum(ez1 * log(1 - pi1) + ez * log(pi1))
pi1 <- mean(ez)
if(plot_iter) {
if(iter_num %in% plot_iters) {
plot(x, main = paste0("Iteration ", as.character(iter_num)))
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
if(iter_num == 1) {
convergence <- F
} else {
convergence <- abs((current_logL - prev_logL)/prev_logL) < epsilon
}
if(print_iter_logL)
print(current_logL)
prev_logL <- current_logL
iter_num <- iter_num + 1
}
if(plot_iter) {
if(-1 %in% plot_iters) {
plot(x)
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
return(list(mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1, Sigma2 = Sigma2, ez = ez))
}
print_gmm_results <- function(gmm) {
print(paste0("mu1_eruptions = ", gmm$mu1["eruptions"], ", mu1_waiting = ", gmm$mu1["waiting"]))
print(paste0("mu2_eruptions = ", gmm$mu2["eruptions"], ", mu2_waiting = ", gmm$mu2["waiting"]))
print("Sigma1:")
print(gmm$Sigma1)
print("Sigma2:")
print(gmm$Sigma2)
hist(gmm$ez, main = "Histogram of probabilities", xlab = "Probabilities")
}
gmm <- estimate_GMM(x = faithful, mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm)
mu1_new <- c(2.0, 52)
mu2_new <- c(4.5, 80)
gmm_new <- estimate_GMM(x = faithful, mu1 = mu1_new, mu2 = mu2_new, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm_new)
calculate_ML_sigma <- function(x, mu, ez) {
x_mu <- apply(x, 1, function(x_i) {
diff1 <- x_i - mu
mat <- diff1 %*% t(diff1)
return(mat)
})
temp_ez <- t(matrix(rep(ez, 4), nrow = 272, byrow = F))
s1 <- rowSums(x_mu * temp_ez) / sum(ez)
Sigma1 <- matrix(s1, nrow = ncol(x), ncol = ncol(x))
}
library(mvtnorm)
pi1 <- 0.5
convergence <- F
estimate_GMM <- function(x, mu1, mu2, Sigma1, Sigma2, plot_iter = F,
plot_iters = c(2, 3, 4, -1), epsilon = 1e-6,
print_iter_logL = FALSE) {
iter_num <- 1
prev_logL <- -Inf
while(!convergence) {
# E step
d1 <- pi1 * dmvnorm(x = x, mean = mu1, sigma = Sigma1)
d2 <- (1 - pi1) * dmvnorm(x = x, mean = mu2, sigma = Sigma2)
ez = d2 / (d1 + d2)
ez1 <- 1 - ez
# M step
mu1 <- colSums(ez1 * x) / sum(ez1)
mu2 <- colSums(ez * x) / sum(ez)
Sigma1 <- calculate_ML_sigma(x, mu1, ez1)
Sigma2 <- calculate_ML_sigma(x, mu2, ez)
current_logL <- sum(ez1 * log(d1) + ez * log(d2)) + sum(ez1 * log(1 - pi1) + ez * log(pi1))
pi1 <- mean(ez)
if(plot_iter) {
if(iter_num %in% plot_iters) {
plot(x, main = paste0("Iteration ", as.character(iter_num)))
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
if(iter_num == 1) {
convergence <- F
} else {
convergence <- abs((current_logL - prev_logL)/prev_logL) < epsilon
}
if(print_iter_logL)
print(current_logL)
prev_logL <- current_logL
iter_num <- iter_num + 1
}
if(plot_iter) {
if(-1 %in% plot_iters) {
plot(x)
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
return(list(mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1, Sigma2 = Sigma2, ez = ez,
iter_num = iter_num))
}
print_gmm_results <- function(gmm) {
print("EM converged in ", gmm$iter_num, " steps")
print(paste0("mu1_eruptions = ", gmm$mu1["eruptions"], ", mu1_waiting = ",
gmm$mu1["waiting"]))
print(paste0("mu2_eruptions = ", gmm$mu2["eruptions"], ", mu2_waiting = ",
gmm$mu2["waiting"]))
print("Sigma1:")
print(gmm$Sigma1)
print("Sigma2:")
print(gmm$Sigma2)
hist(gmm$ez, main = "Histogram of probabilities", xlab = "Probabilities")
}
gmm <- estimate_GMM(x = faithful, mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm)
calculate_ML_sigma <- function(x, mu, ez) {
x_mu <- apply(x, 1, function(x_i) {
diff1 <- x_i - mu
mat <- diff1 %*% t(diff1)
return(mat)
})
temp_ez <- t(matrix(rep(ez, 4), nrow = 272, byrow = F))
s1 <- rowSums(x_mu * temp_ez) / sum(ez)
Sigma1 <- matrix(s1, nrow = ncol(x), ncol = ncol(x))
}
library(mvtnorm)
pi1 <- 0.5
convergence <- F
estimate_GMM <- function(x, mu1, mu2, Sigma1, Sigma2, plot_iter = F,
plot_iters = c(2, 3, 4, -1), epsilon = 1e-6,
print_iter_logL = FALSE) {
iter_num <- 1
prev_logL <- -Inf
while(!convergence) {
# E step
d1 <- pi1 * dmvnorm(x = x, mean = mu1, sigma = Sigma1)
d2 <- (1 - pi1) * dmvnorm(x = x, mean = mu2, sigma = Sigma2)
ez = d2 / (d1 + d2)
ez1 <- 1 - ez
# M step
mu1 <- colSums(ez1 * x) / sum(ez1)
mu2 <- colSums(ez * x) / sum(ez)
Sigma1 <- calculate_ML_sigma(x, mu1, ez1)
Sigma2 <- calculate_ML_sigma(x, mu2, ez)
current_logL <- sum(ez1 * log(d1) + ez * log(d2)) + sum(ez1 * log(1 - pi1) + ez * log(pi1))
pi1 <- mean(ez)
if(plot_iter) {
if(iter_num %in% plot_iters) {
plot(x, main = paste0("Iteration ", as.character(iter_num)))
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
if(iter_num == 1) {
convergence <- F
} else {
convergence <- abs((current_logL - prev_logL)/prev_logL) < epsilon
}
if(print_iter_logL)
print(current_logL)
prev_logL <- current_logL
iter_num <- iter_num + 1
}
if(plot_iter) {
if(-1 %in% plot_iters) {
plot(x)
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
return(list(mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1, Sigma2 = Sigma2, ez = ez,
iter_num = iter_num))
}
print_gmm_results <- function(gmm) {
print(paste0("EM converged in ", gmm$iter_num, " steps"))
print(paste0("mu1_eruptions = ", gmm$mu1["eruptions"], ", mu1_waiting = ",
gmm$mu1["waiting"]))
print(paste0("mu2_eruptions = ", gmm$mu2["eruptions"], ", mu2_waiting = ",
gmm$mu2["waiting"]))
print("Sigma1:")
print(gmm$Sigma1)
print("Sigma2:")
print(gmm$Sigma2)
hist(gmm$ez, main = "Histogram of probabilities", xlab = "Probabilities")
}
gmm <- estimate_GMM(x = faithful, mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm)
mu1_new <- c(2.0, 52)
mu2_new <- c(4.5, 80)
gmm_new <- estimate_GMM(x = faithful, mu1 = mu1_new, mu2 = mu2_new, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm_new)
setwd("~/Desktop/Coding/IBM/notebooks/adsb_preprocessing/Flight_Phase_Identification")
library(plyr)
library(dplyr)
library(data.table)
library(splines)
library(parallel)
fillna <- function(na_series) {
na_idx <- which(is.na(na_series))
while(length(na_idx) > 0) {
na_series[na_idx] <- na_series[na_idx - 1]
na_idx <- which(is.na(na_series))
}
return(na_series)
}
expand_summary_df <- function(summary_df) {
df <- data.frame()
for(i in 1:nrow(summary_df)) {
df <- rbind(df, data.frame(ts_readable = summary_df$start_ts[i],
altitude = summary_df$start_altitude[i],
climb_rate_sign = summary_df$climb_rate_sign[i]))
df <- rbind(df, data.frame(ts_readable = summary_df$start_ts[i] + summary_df$duration[i],
altitude = summary_df$end_altitude[i],
climb_rate_sign = summary_df$climb_rate_sign[i]))
}
return(df)
}
get_alt_change_df <- function(ac_data) {
ac_data[, "last_altitude" := c(NA, altitude[-.N]), by = "id"]
# ac_data$est_climb_rate <- NULL
alt_change_idx <- which(ac_data$altitude != ac_data$last_altitude | is.na(ac_data$last_altitude))
alt_change_idx <- unique(unlist(lapply(alt_change_idx, function(idx) c(idx - 1, idx, idx + 1))))
alt_change_idx <- alt_change_idx[alt_change_idx != 0]
alt_change_df <- ac_data[alt_change_idx, ]
# alt_change_df[, "last_ts_alt_change" := c(NA, ts[-.N]), by = "id"]
# alt_change_df$last_ts_diff_alt_change <- alt_change_df$ts - alt_change_df$last_ts_alt_change
# alt_change_df$est_climb_rate <- 60 * (alt_change_df$altitude - alt_change_df$last_altitude)/alt_change_df$last_ts_diff_alt_change
alt_change_df <- alt_change_df[, c("id", "ts", "altitude", "ts_readable"#, "climb_rate"#,
#"est_climb_rate"
)]
# alt_change_df$est_climb_rate[is.na(alt_change_df$est_climb_rate)] <- 0
return(alt_change_df)
}
identify_flight_phase <- function(uniq_id, plot_phases = T, return_dataframe = T) {
return_df <- data.frame()
for(id1 in uniq_id) {
tryCatch({
mdl <- smooth.spline(x = alt_change_df$ts[alt_change_df$id == id1],
y = alt_change_df$altitude[alt_change_df$id == id1])
est_climb_rate <- diff(predict(mdl, alt_change_df$ts[alt_change_df$id == id1])$y)/
diff(alt_change_df$ts[alt_change_df$id == id1])
est_climb_rate[abs(est_climb_rate) < 3] <- 0
climb_rate_sign <- sign(est_climb_rate)
climb_rate_sign_change <- c(NA, climb_rate_sign[-1] != (climb_rate_sign[-length(climb_rate_sign)]))
climb_rate_sign_change[is.na(climb_rate_sign_change)] <- T
df1 <- data.frame(ts_readable = alt_change_df$ts_readable[alt_change_df$id == id1],
altitude = alt_change_df$altitude[alt_change_df$id == id1],
climb_rate_sign = c(0, climb_rate_sign),
climb_rate_sign_change = c(climb_rate_sign_change, F),
duration = alt_change_df$alt_duration[alt_change_df$id == id1])
df1$alt_diff_sign_change <- cumsum(df1$climb_rate_sign_change)
setDT(df1)
summary_df <- df1[, .(start_ts = ts_readable[1], start_altitude = altitude[1], end_altitude = altitude[.N],
duration = sum(duration, na.rm = T), alt_diff = altitude[.N] - altitude[1]),
by = alt_diff_sign_change]
summary_df$climb_rate_sign_change <- T
df2 <- merge(alt_change_df[alt_change_df$id == id1, c("ts_readable", "id", "ts", "altitude")],
summary_df[, c("start_ts", "start_altitude", "end_altitude", "duration", "alt_diff",
"climb_rate_sign_change")],
by.x = c("ts_readable"), by.y = "start_ts", all.x = T)
df2$climb_rate_sign <- sign(df2$alt_diff)
df2$climb_rate_sign[abs(df2$alt_diff) < 500] <- 0
df2$climb_rate_sign <- fillna(df2$climb_rate_sign)
df2$climb_rate_sign_change <- c(T, df2$climb_rate_sign[-1] != df2$climb_rate_sign[-nrow(df2)])
df2$total_climb_rate_sign_change <- cumsum(df2$climb_rate_sign_change)
summary_df <- df2[, .(start_ts = ts_readable[1], start_altitude = altitude[1],
end_altitude = altitude[.N], duration = sum(duration, na.rm = T),
alt_diff = altitude[.N] - altitude[1]),
by = "total_climb_rate_sign_change"]
summary_df$climb_rate_sign_change <- T
summary_df$climb_rate_sign <- sign(summary_df$alt_diff)
summary_df$climb_rate_sign[abs(summary_df$alt_diff) <= 500] <- 0
summary_df1 <- expand_summary_df(summary_df)
summary_df2 <- summary_df1[c(seq(1, nrow(summary_df1), by = 2), nrow(summary_df1)), ]
summary_df2$decision_point <- TRUE
summary_df2$decision_point[nrow(summary_df2)] <- FALSE
climb_height <- (summary_df2$altitude[-1] - summary_df2$altitude[-nrow(summary_df2)])
delta_time <- (as.numeric(summary_df2$ts_readable[-1]) -
as.numeric(summary_df2$ts_readable[-nrow(summary_df2)]))
climb_rate <- climb_height/delta_time
summary_df2$climb_rate <- c(climb_rate, climb_rate[length(climb_rate)])
final_df <- merge(ac_data[ac_data$id == id1, ], summary_df2, all.x = T, by = c("ts_readable", "altitude"))
final_df$climb_rate_sign <- fillna(final_df$climb_rate_sign)
final_df$climb_rate <- fillna(final_df$climb_rate)
if(plot_phases) {
png(paste0("flight_phase/", id1, ".png"), width = 800, height = 600)
plot(final_df$ts_readable, final_df$altitude, col = final_df$climb_rate_sign + 4, cex = 0.5)
points(final_df$ts_readable[final_df$decision_point], final_df$altitude[final_df$decision_point],
col = "red", cex = 1, pch = 20)
legend("topright", legend = unique(final_df$climb_rate_sign), fill = unique(final_df$climb_rate_sign) + 4)
dev.off()
}
if(return_dataframe) {
return_df <- rbind(return_df, final_df)
}
}, error = function(e) print(id1))
}
return(return_df)
}
identify_flight_phase_plot <- function(uniq_id, return_dataframe = T) {
return(identify_flight_phase(uniq_id = uniq_id, plot_phases = T, return_dataframe = return_dataframe))
}
# setwd("/Users/naveensathiyanathan/Desktop/Coding/Old/ATC_Analysis_2019_04_01/Flight_Phase_Identification/")
# ac_data <- readRDS("high_ac_data.Rds")
ac_data <- fread("../../../2019-05-24.csv", header = F)
temp_dat <- fread("../../../samples_with_jfk_landing_flag.csv", nrows = 2)
colnames(ac_data) <- colnames(temp_dat)
setDT(ac_data)
setorder(ac_data, id, ts)
ac_data[, "ts_readable" := as.POSIXct.numeric(as.numeric(ts), origin="1970-01-01"), ]
# ac_data$ts_readable <- as.POSIXct.numeric(as.numeric(ac_data$ts), origin="1970-01-01")
alt_change_df <- get_alt_change_df(ac_data)
alt_change_df$alt_change <- TRUE
ac_data <- merge(ac_data, alt_change_df, all = T)
ac_data <- ac_data[!is.na(ac_data$id), ]
ac_data$alt_change[is.na(ac_data$alt_change)] <- F
ac_data[, "total_alt_change" := cumsum(alt_change), by = "id"]
ac_data[, "next_ts" := c(ts[-1], NA), by = "id"]
ac_data$next_ts_diff <- ac_data$next_ts - ac_data$ts
ac_data[, "alt_duration" := sum(next_ts_diff, na.rm = T), by = list(id, total_alt_change)]
alt_change_df <- ac_data[ac_data$alt_change,
c("id", "ts", "ts_readable",
"altitude", "total_alt_change", "alt_duration"#,
#"climb_rate", "est_climb_rate"
)]
alt_change_df <- alt_change_df[!is.na(alt_change_df$id), ]
alt_change_df1 <- merge(alt_change_df, ac_data[, c("id", "ts", "lon", "lat", "altitude", "jfk_landing_flag")], by = c("id", "ts"))
alt_change_df1 <- alt_change_df1[alt_change_df1$jfk_landing_flag, ]
jfk_pos <- c(40.6413, -73.7781)
alt_change_df1$distance_from_airport <- apply(alt_change_df1[, c("lon", "lat")], 1,
function(row)
geosphere::distm(row, rev(jfk_pos)))
cores <- detectCores() - 1
cl <- makeCluster(cores)
ac_data <- ac_data[, c("id", "ts_readable", "altitude")]
clusterExport(cl, list("smooth.spline", "alt_change_df", "diff", "c", "sign", "merge", "abs", "fillna",
"data.frame", "cumsum", "%>%", "group_by", "summarize", "first", "last", "sum",
"expand_summary_df", "seq", "plot", "points", "legend", "dev.off", "tryCatch",
"setDT", "which", "is.na", "ac_data", "identify_flight_phase"))
uniq_id <- unique(alt_change_df$id)
num <- ceiling(length(uniq_id)/cores)
idx <- ceiling(1:length(uniq_id)/num)
uniq_id_splits <- split(uniq_id, idx)
out_df <- parLapply(cl = cl, X = uniq_id_splits, fun = identify_flight_phase_plot)
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(cores)
ac_data <- ac_data[, c("id", "ts_readable", "altitude")]
clusterExport(cl, list("smooth.spline", "alt_change_df", "diff", "c", "sign", "merge", "abs", "fillna",
"data.frame", "cumsum", "%>%", "group_by", "summarize", "first", "last", "sum",
"expand_summary_df", "seq", "plot", "points", "legend", "dev.off", "tryCatch",
"setDT", "which", "is.na", "ac_data", "identify_flight_phase"))
uniq_id <- unique(alt_change_df$id)
num <- ceiling(length(uniq_id)/cores)
idx <- ceiling(1:length(uniq_id)/num)
uniq_id_splits <- split(uniq_id, idx)
out_df <- parLapply(cl = cl, X = uniq_id_splits, fun = identify_flight_phase_plot)
stopCluster(cl)
cl <- makeCluster(cores)
ac_data <- ac_data[, c("id", "ts_readable", "altitude")]
clusterExport(cl, list("smooth.spline", "alt_change_df", "diff", "c", "sign", "merge", "abs", "fillna",
"data.frame", "cumsum", "%>%", "group_by", "summarize", "first", "last", "sum",
"expand_summary_df", "seq", "plot", "points", "legend", "dev.off", "tryCatch",
"setDT", "which", "is.na", "ac_data", "identify_flight_phase"))
uniq_id <- unique(alt_change_df$id)
num <- ceiling(length(uniq_id)/cores)
idx <- ceiling(1:length(uniq_id)/num)
uniq_id_splits <- split(uniq_id, idx)
out_df <- parLapply(cl = cl, X = uniq_id_splits, fun = identify_flight_phase_plot)
stopCluster(cl)
