wss <- get_wss(x1)
return(list(cluster = next_clusters, wss = wss))
}
cluster <- run_kmeans(x = x_train, k = 5)
cluster_class <- table("Cluster" = cluster$cluster, "Label" = y_train)
print(cluster_class)
cluster_max_class <- apply(cluster_class, 1, function(row)
return(which.max(row) - 1))
print(cluster_max_class)
?princomp
pca <- princomp(x = x_train, center = T, scale = T)
plot(x = pca$scores[, 1], y = pca$scores[, 2], col = clusters,
xlab = "PC1", ylab = "PC2", pch = 19)
min_wss <- Inf
clusters <- c()
for(i in 1:10) {
cluster <- run_kmeans(x = x_train, k = 5)
if(cluster$wss < min_wss) {
min_wss <- cluster$wss
clusters <- cluster$cluster
}
}
pca <- princomp(x = x_train, center = T, scale = T)
plot(x = pca$scores[, 1], y = pca$scores[, 2], col = clusters,
xlab = "PC1", ylab = "PC2", pch = 19)
legend("topright", legend = paste0("Cluster_", unique(clusters)),
fill = unique(clusters))
km <- kmeans(x_train, centers = 5, nstart = 10)
cluster_class <- table("Cluster" = km$cluster, "Label" = y_train)
print(cluster_class)
plot(x = pca$scores[, 1], y = pca$scores[, 2], col = km$cluster,
xlab = "PC1", ylab = "PC2", pch = 19)
legend("topright", legend = paste0("Cluster_", unique(km$cluster)),
fill = unique(km$cluster))
cluster_class <- table("Cluster" = km$cluster, "Label" = clusters)
print(cluster_class)
calculate_ML_sigma <- function(x, mu, ez) {
x_mu <- apply(x, 1, function(x_i) {
diff1 <- x_i - mu
mat <- diff1 %*% t(diff1)
return(mat)
})
temp_ez <- t(matrix(rep(ez, 4), nrow = 272, byrow = F))
s1 <- rowSums(x_mu * temp_ez) / sum(ez)
Sigma1 <- matrix(s1, nrow = ncol(x), ncol = ncol(x))
}
library(mvtnorm)
pi1 <- 0.5
convergence <- F
estimate_GMM <- function(x, mu1, mu2, Sigma1, Sigma2, plot_iter = F,
plot_iters = c(2, 3, 4, -1), epsilon = 1e-6,
print_iter_logL = FALSE) {
iter_num <- 1
prev_logL <- -Inf
while(!convergence) {
# E step
d1 <- pi1 * dmvnorm(x = x, mean = mu1, sigma = Sigma1)
d2 <- (1 - pi1) * dmvnorm(x = x, mean = mu2, sigma = Sigma2)
ez = d2 / (d1 + d2)
ez1 <- 1 - ez
# M step
mu1 <- colSums(ez1 * x) / sum(ez1)
mu2 <- colSums(ez * x) / sum(ez)
Sigma1 <- calculate_ML_sigma(x, mu1, ez1)
Sigma2 <- calculate_ML_sigma(x, mu2, ez)
current_logL <- sum(ez1 * log(d1) + ez * log(d2)) + sum(ez1 * log(1 - pi1) + ez * log(pi1))
pi1 <- mean(ez)
if(plot_iter) {
if(iter_num %in% plot_iters) {
plot(x, main = paste0("Iteration ", as.character(iter_num)))
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
if(iter_num == 1) {
convergence <- F
} else {
convergence <- abs((current_logL - prev_logL)/prev_logL) < epsilon
}
if(print_iter_logL)
print(current_logL)
prev_logL <- current_logL
iter_num <- iter_num + 1
}
if(plot_iter) {
if(-1 %in% plot_iters) {
plot(x)
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
return(list(mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1, Sigma2 = Sigma2, ez = ez))
}
print_gmm_results <- function(gmm) {
print(paste0("mu1_eruptions = ", gmm$mu1["eruptions"], ", mu1_waiting = ", gmm$mu1["waiting"]))
print(paste0("mu2_eruptions = ", gmm$mu2["eruptions"], ", mu2_waiting = ", gmm$mu2["waiting"]))
print("Sigma1:")
print(gmm$Sigma1)
print("Sigma2:")
print(gmm$Sigma2)
hist(gmm$ez, main = "Histogram of probabilities", xlab = "Probabilities")
}
gmm <- estimate_GMM(x = faithful, mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm)
mu1_new <- c(2.0, 52)
mu2_new <- c(4.5, 80)
gmm_new <- estimate_GMM(x = faithful, mu1 = mu1_new, mu2 = mu2_new, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm_new)
calculate_ML_sigma <- function(x, mu, ez) {
x_mu <- apply(x, 1, function(x_i) {
diff1 <- x_i - mu
mat <- diff1 %*% t(diff1)
return(mat)
})
temp_ez <- t(matrix(rep(ez, 4), nrow = 272, byrow = F))
s1 <- rowSums(x_mu * temp_ez) / sum(ez)
Sigma1 <- matrix(s1, nrow = ncol(x), ncol = ncol(x))
}
library(mvtnorm)
pi1 <- 0.5
convergence <- F
estimate_GMM <- function(x, mu1, mu2, Sigma1, Sigma2, plot_iter = F,
plot_iters = c(2, 3, 4, -1), epsilon = 1e-6,
print_iter_logL = FALSE) {
iter_num <- 1
prev_logL <- -Inf
while(!convergence) {
# E step
d1 <- pi1 * dmvnorm(x = x, mean = mu1, sigma = Sigma1)
d2 <- (1 - pi1) * dmvnorm(x = x, mean = mu2, sigma = Sigma2)
ez = d2 / (d1 + d2)
ez1 <- 1 - ez
# M step
mu1 <- colSums(ez1 * x) / sum(ez1)
mu2 <- colSums(ez * x) / sum(ez)
Sigma1 <- calculate_ML_sigma(x, mu1, ez1)
Sigma2 <- calculate_ML_sigma(x, mu2, ez)
current_logL <- sum(ez1 * log(d1) + ez * log(d2)) + sum(ez1 * log(1 - pi1) + ez * log(pi1))
pi1 <- mean(ez)
if(plot_iter) {
if(iter_num %in% plot_iters) {
plot(x, main = paste0("Iteration ", as.character(iter_num)))
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
if(iter_num == 1) {
convergence <- F
} else {
convergence <- abs((current_logL - prev_logL)/prev_logL) < epsilon
}
if(print_iter_logL)
print(current_logL)
prev_logL <- current_logL
iter_num <- iter_num + 1
}
if(plot_iter) {
if(-1 %in% plot_iters) {
plot(x)
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
return(list(mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1, Sigma2 = Sigma2, ez = ez,
iter_num = iter_num))
}
print_gmm_results <- function(gmm) {
print("EM converged in ", gmm$iter_num, " steps")
print(paste0("mu1_eruptions = ", gmm$mu1["eruptions"], ", mu1_waiting = ",
gmm$mu1["waiting"]))
print(paste0("mu2_eruptions = ", gmm$mu2["eruptions"], ", mu2_waiting = ",
gmm$mu2["waiting"]))
print("Sigma1:")
print(gmm$Sigma1)
print("Sigma2:")
print(gmm$Sigma2)
hist(gmm$ez, main = "Histogram of probabilities", xlab = "Probabilities")
}
gmm <- estimate_GMM(x = faithful, mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm)
calculate_ML_sigma <- function(x, mu, ez) {
x_mu <- apply(x, 1, function(x_i) {
diff1 <- x_i - mu
mat <- diff1 %*% t(diff1)
return(mat)
})
temp_ez <- t(matrix(rep(ez, 4), nrow = 272, byrow = F))
s1 <- rowSums(x_mu * temp_ez) / sum(ez)
Sigma1 <- matrix(s1, nrow = ncol(x), ncol = ncol(x))
}
library(mvtnorm)
pi1 <- 0.5
convergence <- F
estimate_GMM <- function(x, mu1, mu2, Sigma1, Sigma2, plot_iter = F,
plot_iters = c(2, 3, 4, -1), epsilon = 1e-6,
print_iter_logL = FALSE) {
iter_num <- 1
prev_logL <- -Inf
while(!convergence) {
# E step
d1 <- pi1 * dmvnorm(x = x, mean = mu1, sigma = Sigma1)
d2 <- (1 - pi1) * dmvnorm(x = x, mean = mu2, sigma = Sigma2)
ez = d2 / (d1 + d2)
ez1 <- 1 - ez
# M step
mu1 <- colSums(ez1 * x) / sum(ez1)
mu2 <- colSums(ez * x) / sum(ez)
Sigma1 <- calculate_ML_sigma(x, mu1, ez1)
Sigma2 <- calculate_ML_sigma(x, mu2, ez)
current_logL <- sum(ez1 * log(d1) + ez * log(d2)) + sum(ez1 * log(1 - pi1) + ez * log(pi1))
pi1 <- mean(ez)
if(plot_iter) {
if(iter_num %in% plot_iters) {
plot(x, main = paste0("Iteration ", as.character(iter_num)))
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
if(iter_num == 1) {
convergence <- F
} else {
convergence <- abs((current_logL - prev_logL)/prev_logL) < epsilon
}
if(print_iter_logL)
print(current_logL)
prev_logL <- current_logL
iter_num <- iter_num + 1
}
if(plot_iter) {
if(-1 %in% plot_iters) {
plot(x)
addellipse(mu1, Sigma1, col = "darkorange")
addellipse(mu2, Sigma2, col = "deepskyblue")
}
}
return(list(mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1, Sigma2 = Sigma2, ez = ez,
iter_num = iter_num))
}
print_gmm_results <- function(gmm) {
print(paste0("EM converged in ", gmm$iter_num, " steps"))
print(paste0("mu1_eruptions = ", gmm$mu1["eruptions"], ", mu1_waiting = ",
gmm$mu1["waiting"]))
print(paste0("mu2_eruptions = ", gmm$mu2["eruptions"], ", mu2_waiting = ",
gmm$mu2["waiting"]))
print("Sigma1:")
print(gmm$Sigma1)
print("Sigma2:")
print(gmm$Sigma2)
hist(gmm$ez, main = "Histogram of probabilities", xlab = "Probabilities")
}
gmm <- estimate_GMM(x = faithful, mu1 = mu1, mu2 = mu2, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm)
mu1_new <- c(2.0, 52)
mu2_new <- c(4.5, 80)
gmm_new <- estimate_GMM(x = faithful, mu1 = mu1_new, mu2 = mu2_new, Sigma1 = Sigma1,
Sigma2 = Sigma2, plot_iter = T)
print_gmm_results(gmm_new)
setwd("~/Desktop/Coding/IBM/notebooks/adsb_preprocessing/Redefined_Landing")
library(plyr)
library(dplyr)
library(data.table)
# V6 is heading in degrees
# V2 seems to change for each aircraft during exit-entry
# V14 is 'from' airport
# V7 is altitude in ft
# V8 is ground speed in kts
# V15 is 'to' airport
# V3 looks like a proxy for aircraft
# V13 is timestamp
# V18 is instantaneous climb rate (jittery)
# V16_V19 looks like a good proxy for aircraft id: more relevant than V3 (aircraft)
# V16_V19 can refine V3
# V17 looks like 'aircraft at airport' flag
lower_lat <- 35
upper_lat <- 45
lower_lon <- -78
upper_lon <- -68
lat_range <- 0.4
lon_range <- 0.5
ts_diff_ground <- 1080
ts_diff_exit_enter <- 1080
ts_diff_expired <- 7200
airport_lat_half_range <- airport_lon_half_range <- 0.1
setwd("~/Desktop/Coding/Old/ATC_Analysis_2019_04_01/Refedined_Landing")
########################################################################
############## Reading ADS-B data and preprocessing ####################
########################################################################
landed_altitude <- 1000 # may not need this because of V17
v1_ground <- 50
surely_grounded_speed <- 10
ac_data <- fread("../../../landing_samples.csv")
library(geosphere)
?geosphere::distm
dists <- apply(ac_data, 1, function(row) geosphere::distm(c(row["lon"], row["lat"]), c(-73.7781, 40.6413)))
plot(dists, ac_data$altitude)
png("dist_alt.png")
plot(dists, ac_data$altitude)
dev.off()
saveRDS(dists, "distances.Rds")
diff_ac <- unique(ac_data$id[dists < 1000 & ac_data$altitude > 5000])
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
ac_data <- fread("../../../landing_samples.csv")
ac_data$distance <- dists
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
plot(ac_data$distance, ac_data$altitude)
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude)
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 1e05))
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 1e04))
dev.off()
diff_ac <- unique(ac_data$id[dists < 4000 & ac_data$altitude > 5000])
library(data.table)
ac_data <- fread("../../../landing_samples.csv")
if(!("distances.Rds" %in% list.files())) {
dists <- apply(ac_data, 1, function(row)
geosphere::distm(c(row["lon"], row["lat"]), c(-73.7781, 40.6413)))
saveRDS(dists, "distances.Rds")
} else {
dists <- readRDS("distances.Rds")
}
diff_ac <- unique(ac_data$id[dists < 4000 & ac_data$altitude > 5000])
ac_data$distance <- dists
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude)
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 3000))
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 10000))
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 50000))
dev.off()
library(data.table)
ac_data <- fread("../../../landing_samples.csv")
if(!("distances.Rds" %in% list.files())) {
dists <- apply(ac_data, 1, function(row)
geosphere::distm(c(row["lon"], row["lat"]), c(-73.7781, 40.6413)))
saveRDS(dists, "distances.Rds")
} else {
dists <- readRDS("distances.Rds")
}
diff_ac <- unique(ac_data$id[(dists < 4000 & ac_data$altitude > 5000) |
(dists > 10000 & ac_data$altitude < 1000)])
ac_data$distance <- dists
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
png("dist_alt.png", xlim = c(0, 50000))
plot(ac_data$distance, ac_data$altitude)
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 50000))
dev.off()
library(data.table)
ac_data <- fread("../../../landing_samples.csv")
if(!("distances.Rds" %in% list.files())) {
dists <- apply(ac_data, 1, function(row)
geosphere::distm(c(row["lon"], row["lat"]), c(-73.7781, 40.6413)))
saveRDS(dists, "distances.Rds")
} else {
dists <- readRDS("distances.Rds")
}
diff_ac <- unique(ac_data$id[(dists < 4000 & ac_data$altitude > 5000) |
(dists > 20000 & ac_data$altitude < 1000)])
ac_data$distance <- dists
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 50000))
dev.off()
library(data.table)
ac_data <- fread("../../../landing_samples.csv")
if(!("distances.Rds" %in% list.files())) {
dists <- apply(ac_data, 1, function(row)
geosphere::distm(c(row["lon"], row["lat"]), c(-73.7781, 40.6413)))
saveRDS(dists, "distances.Rds")
} else {
dists <- readRDS("distances.Rds")
}
diff_ac <- unique(ac_data$id[(dists < 4000 & ac_data$altitude > 5000) |
(dists > 2000 & ac_data$altitude < 1000)])
ac_data$distance <- dists
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 50000))
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 100000))
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 200000))
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 200000), col = "gray")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 200000), col = "grey")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 300000), col = "grey")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == ac_data$id[1]],
ac_data$altitude[ac_data$id == ac_data$id[1]], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == ac_data$id[2]],
ac_data$altitude[ac_data$id == ac_data$id[2]], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == unique(ac_data$id)[1]],
ac_data$altitude[ac_data$id == unique(ac_data$id)[1]], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == unique(ac_data$id)[2]],
ac_data$altitude[ac_data$id == unique(ac_data$id)[2]], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == unique(ac_data$id)[3]],
ac_data$altitude[ac_data$id == unique(ac_data$id)[3]], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == unique(ac_data$id)[4]],
ac_data$altitude[ac_data$id == unique(ac_data$id)[4]], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == unique(ac_data$id)[40]],
ac_data$altitude[ac_data$id == unique(ac_data$id)[40]], col = "red")
dev.off()
ac_data$distance[ac_data$id == unique(ac_data$id)[40]]
ac_data$distance[ac_data$id == unique(ac_data$id)[400]]
table(ac_data$id)
max(table(ac_data$id))
which.max(table(ac_data$id))
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == "0D0418_3"],
ac_data$altitude[ac_data$id == "0D0418_3"], col = "red")
dev.off()
unique(ac_data$id[ac_data$altitude > 20000 & ac_data$distance < 50000])
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == "0D0418_3"],
ac_data$altitude[ac_data$id == "0D0418_3"], col = "green")
lines(ac_data$distance[ac_data$id == "A22702_14"],
ac_data$altitude[ac_data$id == "A22702_14"], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey")
lines(ac_data$distance[ac_data$id == "0D0418_3"],
ac_data$altitude[ac_data$id == "0D0418_3"], col = "dark green")
lines(ac_data$distance[ac_data$id == "A22702_14"],
ac_data$altitude[ac_data$id == "A22702_14"], col = "red")
dev.off()
png("dist_alt.png")
plot(ac_data$distance, ac_data$altitude, xlim = c(0, 250000), col = "grey",
xlab = "Distance from JFK airport", ylab = "Altitude (ft)")
lines(ac_data$distance[ac_data$id == "0D0418_3"],
ac_data$altitude[ac_data$id == "0D0418_3"], col = "dark green")
lines(ac_data$distance[ac_data$id == "A22702_14"],
ac_data$altitude[ac_data$id == "A22702_14"], col = "red")
dev.off()
fwrite(ac_data, "../../../dist_alt.csv")
library(data.table)
ac_data <- fread("../../../landing_samples.csv")
if(!("distances.Rds" %in% list.files())) {
dists <- apply(ac_data, 1, function(row)
geosphere::distm(c(row["lon"], row["lat"]), c(-73.7781, 40.6413)))
saveRDS(dists, "distances.Rds")
} else {
dists <- readRDS("distances.Rds")
}
diff_ac <- unique(ac_data$id[#(dists < 4000 & ac_data$altitude > 5000) |
(dists > 2000 & ac_data$altitude < 1000)])
ac_data$distance <- dists
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
library(data.table)
ac_data <- fread("../../../landing_samples.csv")
if(!("distances.Rds" %in% list.files())) {
dists <- apply(ac_data, 1, function(row)
geosphere::distm(c(row["lon"], row["lat"]), c(-73.7781, 40.6413)))
saveRDS(dists, "distances.Rds")
} else {
dists <- readRDS("distances.Rds")
}
diff_ac <- unique(ac_data$id[#(dists < 4000 & ac_data$altitude > 5000) |
(dists > 2000 & dists < 20000 & ac_data$altitude < 1000)])
diff_ac <- unique(ac_data$id[#(dists < 4000 & ac_data$altitude > 5000) |
(dists > 2000 & dists < 20000 & ac_data$altitude < 100)])
ac_data$distance <- dists
ac_data <- ac_data[sapply(ac_data$id, function(id1) !(id1 %in% diff_ac)), ]
fwrite(ac_data, "../../../landing_samples.csv")
setorder(ac_data, id, ts)
ac_data <- ac_data[, .SD[.N], by = "id"]
gc()
fwrite(ac_data, "../../../touchdown.csv")
library(splines)
